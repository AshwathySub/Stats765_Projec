#parsimonious classification tree
ii <- which(pima.cart$cptable[,4]<sum(pima.cart$cptable[which.min(pima.cart$cptable[,4]),c(4,5)]))
cp.1se=max(pima.cart$cptable[ii,1])
pima.1se.prune0 <-prune(pima.cart,cp=cp.1se)
pima.1se.prune0
pima.1se.pred <- predict(pima.1se.prune0,newdata=pima.test,type='class')
#avg error
mean(pima.1se.pred!=pima.test$type)
set.seed(1234)
pima.rf <- randomForest(as.factor(type) ~., data = pima.train, importance=TRUE)
pima.rf
plot(pima.rf)
#prediction
p.pred <- predict(pima.rf,newdata=pima.test,type='response')
#avg error
mean(p.pred!=pima.test$type)
set.seed(1234)
pima.gbm <- gbm((as.numeric(pima.train$type=='Yes'))~., data = pima.train,distribution = "bernoulli",shrinkage = 0.1, n.trees = 500, cv.folds = 10)
pima.gbm.perf = gbm.perf(pima.gbm, method = "cv")
#prediction with the opt number of trees
pima.gbm.pred <- predict(pima.gbm,newdata =pima.test, type='response')
pred.c = rep("No",dim(pima.test)[1])
pred.c[which(pima.gbm.pred>0.5)]="Yes"
#avg error
mean(pred.c!=pima.test$type)
pima.rf$importance
summary.gbm(pima.gbm)
boxplot(glu~type,pima)
library(splines)
Ack=data.frame(Time=c(1:24),Temperature=c(17,17,17,16,16,16,15,15,16,16,17,17,17,17,15,14,14,14,13,13,13,12.5,12,12))
length(Ack)
ord=c(1:10); #polynomial degrees 1-10
poly.err=poly.mse=rep(0,length(ord)); #model fit error
for(i in 1:length(ord)){
#MSE
poly.mse[i]=mean((Ack$Temperature-fitted(lm(Temperature ~ poly(Time,ord[i],raw=TRUE),data=Ack)))^2)
#LOOCV (leave one out cross validation)
for(j in 1:length(Ack$Time)){
poly.err[i]=poly.err[i]+(Ack$Temperature[j]-predict(lm(Temperature ~ poly(Time,ord[i],raw=TRUE),data=Ack[-j,]),newdata=Ack[j,]))^2
}}
par(mfrow=c(1,2))
plot(ord,poly.mse,xlab='degree',ylab='MSE')
plot(ord,poly.err,xlab='degree',ylab='LOOCV error')
#slide 7
#Let's fit 8 polynomial regressions
fit1 <- fitted(lm(Temperature ~ poly(Time,1,raw=TRUE),data=Ack))
fit2 <- fitted(lm(Temperature ~ poly(Time,2,raw=TRUE),data=Ack))
fit3 <- fitted(lm(Temperature ~ poly(Time,3,raw=TRUE),data=Ack))
fit4 <- fitted(lm(Temperature ~ poly(Time,4,raw=TRUE),data=Ack))
fit7 <- fitted(lm(Temperature ~ poly(Time,7,raw=TRUE),data=Ack))
fit8 <- fitted(lm(Temperature ~ poly(Time,8,raw=TRUE),data=Ack))
plot(Ack$Time,Ack$Temperature,ylim=c(11,18)); matlines(Ack$Time,cbind(fit1,fit2,fit3,fit4,fit7,fit8),lty=1,col=c(1:6))
legend(2,13,legend=c("deg 1","deg 2","deg 3","deg 4","deg 7","deg 8"),col=c(1:6), lty=1);
#plot basis functions for various knots
#x-values between 0 and 1
uvec=seq(from=0,to=1,length.out=1e3);
#vector of degrees of freedom
v=c(1,2,3,4,6,8,9,10,11,12); nvec=length(uvec)
par(mfrow=c(2,3))
plot(uvec,ns(uvec,df=1,intercept=FALSE),'l',main="0 knot",xlab="",ylab="Basis")
for(j in 2:10){
plot(uvec,rep(0,nvec),type='n',main=paste(v[j]-1,"knots"),xlab="",ylab="Basis");
u.ns=ns(uvec,df=v[j],intercept=FALSE) #basis functions
for(i in 1:v[j]){lines(uvec,u.ns[,i],col=i)}
}
temp.mse.ns=rep(0,6)
#vector of degrees of freedom
v=c(1,2,3,4,6,8);
par(mfrow=c(2,3))
for(j in 1:6){
#find basis functions for natural splines
n.time=ns(Ack$Time,df=v[j])
#predict the temperature given a time
pre.temp=predict(lm(Ack$Temperature~n.time), interval='confidence');
#MSE
temp.mse.ns[j]=mean((Ack$Temperature-pre.temp[,1])^2)
plot(Ack$Time,Ack$Temperature,main=paste(v[j]-1,"knots"),ylim=c(min(Ack$Temperature)-2,max(Ack$Temperature)+2));
text(10,10,paste("MSE",round(temp.mse.ns[j],digits=4))); lines(Ack$Time,pre.temp[,1],col='red');
lines(Ack$Time,pre.temp[,2],lty=2,col='red'); lines(Ack$Time,pre.temp[,3],lty=2,col='red')
}
#Fit the data using natural splines with 1-21 knots (2-22 degrees of freedom)
rmse=rep(0,20)
for(i in 1:20){
#basis functions for natural splines
yn=ns(Ack$Time,df=(i+1))
#MSE
rmse[i]=mean((Ack$Temperature-fitted(lm(Temperature~yn,data=Ack)))^2)
}
plot(c(1:20),rmse,ylab='MSE',xlab='number of knots')
v=c(5,17)
par(mfrow=c(1,2))
for(j in 1:2){
n.time=ns(Ack$Time,df=v[j]+1)
pre.temp=predict(lm(Temperature~n.time,data=Ack), interval = 'confidence');
temp.mse.ns=mean((Ack$Temperature-pre.temp[,1])^2)
plot(Ack$Time,Ack$Temperature,main=paste(v[j],"knots"),ylim=c(min(Ack$Temperature)-2,max(Ack$Temperature)+2));
text(10,10,paste("MSE",round(temp.mse.ns,digits=4)));
matlines(Ack$Time,pre.temp,col=2,lty=c(1,2,2))
axis(side=1, at=attributes(n.time)$knots, labels = FALSE,lwd.ticks=3,col.ticks="red")
}
uvec=seq(from=0,to=1,length.out=5e3);
#vector of degrees
v=c(1,2,3,4,6,8); nvec=length(uvec)
par(mfrow=c(2,3))
for(j in 1:6){
plot(uvec,rep(0,nvec),type='n',main=paste("degree=",v[j]),xlab="",ylab="Basis",cex.main=2,ylim=c(0,1));
#basis functions for B-splines
u.bs=bs(uvec,degree=v[j],df=v[j]+10)
matlines(uvec,u.bs,lty=1); abline(v=attributes(u.bs)$knots, lty=3, col="grey",lwd=1.4)
}
#number of inner knots
v=c(0,1,2,3,5,7); temp.mse.bs=rep(0,length(v))
par(mfrow=c(2,3))
for(j in 1:6){
#basis functions for B splines when the degree is 3
n.time=bs(Ack$Time,df=v[j]+3)
#predict temperatures given time
pre.temp=predict(lm(Temperature~n.time,data=Ack), interval = 'confidence');
#MSE
temp.mse.bs[j]=mean((Ack$Temperature-pre.temp[,1])^2)
plot(Ack$Time,Ack$Temperature,main=paste(v[j],"knots"),ylim=c(min(Ack$Temperature)-2,max(Ack$Temperature)+2));
text(10,10,paste("MSE",round(temp.mse.bs[j],digits=4))); matlines(Ack$Time,pre.temp,col=2,lty=c(1,2,2));
}
temp.mse.ns=temp.mse.bs=n.knots=c(0:19)
for(j in 1:length(temp.mse.ns)){
#natural splines
t.ns=ns(Ack$Time,df=n.knots[j]+1)
#B splines
t.bs=bs(Ack$Time,df=n.knots[j]+3)
#predict temperatures
pre.t.ns=predict(lm(Temperature~t.ns,data=Ack), interval = 'confidence');
pre.t.bs=predict(lm(Temperature~t.bs,data=Ack), interval = 'confidence');
#MSE
temp.mse.ns[j]=mean((Ack$Temperature-pre.t.ns[,1])^2)
temp.mse.bs[j]=mean((Ack$Temperature-pre.t.bs[,1])^2)
}
plot(n.knots,temp.mse.ns,'l',ylab='MSE',xlab='Number of knots'); lines(n.knots,temp.mse.bs,col='red');
legend(12,0.85,legend=c("Natural splines","B splines, order 4 "),col=c(1,2),lty=1);
#LOOCV error -vs- number of knots
temp.cv.ns=temp.cv.bs=rep(0,length(n.knots))
for(j in 1:length(n.knots)){ for(l in 1:length(Ack$Time)){
#predict temperatures
t.ns=predict(lm(Temperature~ns(Time,df=n.knots[j]+1,intercept=FALSE,Boundary.knots=c(1,24)),data=Ack[-l,]),newdata=Ack[l,])
t.bs=predict(lm(Temperature~bs(Time,df=n.knots[j]+3,intercept=FALSE,Boundary.knots=c(1,24)),data=Ack[-l,]),newdata=Ack[l,])
#cumulative sum of error
temp.cv.ns[j]=temp.cv.ns[j]+(Ack$Temperature[l]-t.ns)^2
temp.cv.bs[j]=temp.cv.bs[j]+(Ack$Temperature[l]-t.bs)^2
}}
temp.cv.ns=temp.cv.ns/length(Ack$Time)
temp.cv.bs=temp.cv.bs/length(Ack$Time)
plot(n.knots,log(temp.cv.ns),ylab='log(cv error)',xlab='Number of knots','o',ylim=c(-3,3)); lines(n.knots,log(temp.cv.bs),col='red','o');
legend(12,2,legend=c("Natural splines","B splines, order 4"),col=c(1,2), lty=1);
t.ns=predict(lm(Temperature~ns(Time,df=5+1),data=Ack),newdata=Ack,interval = 'confidence')
t.bs=predict(lm(Temperature~bs(Time,df=5+3),data=Ack),newdata=Ack,interval = 'confidence')
par(mfrow=c(1,2));
plot(Ack$Time,Ack$Temperature,ylim=c(11,18),main='Natural splines'); matlines(Ack$Time,t.ns,lty=c(1,3,3),col=c(1,1,1));
plot(Ack$Time,Ack$Temperature,ylim=c(11,18),main='B splines'); matlines(Ack$Time,t.bs,lty=c(1,3,3),col=c(1,1,1));
out3=smooth.spline(Ack$Time,Ack$Temperature,df=3,all.knots=TRUE)
out5=smooth.spline(Ack$Time,Ack$Temperature,df=5,all.knots=TRUE)
out10=smooth.spline(Ack$Time,Ack$Temperature,df=10,all.knots=TRUE)
out.cv=smooth.spline(Ack$Time,Ack$Temperature,cv=F,all.knots=TRUE)
plot(Temperature~Time, data=Ack,ylim=c(11.5,18.5)); lines(fitted(out3),col=1); lines(fitted(out5),col=2); lines(fitted(out10),col=3);
lines(fitted(out.cv),col=4); legend('topright',col=c(1:4),legend=c("df=3","df=5","df=10","cv"),lty=1)
Wage=read.csv(file='Wage.csv',header=TRUE)
#possible numbers of knots
n.knots=c(0:30)
cv.wage=matrix(0,length(n.knots),2) #this is where we store the CV for 10 folds
#index for 10 cv folders
ind=rep(c(1:10),300);
for(j in 1:length(n.knots)){ for(l in 1:max(ind)){
t.ns=predict(lm(wage~ns(age,df=n.knots[j]+1,Boundary.knots=c(18,80)),data=Wage[ind!=l,]),newdata=Wage[ind==l,])
t.bs=predict(lm(wage~bs(age,df=n.knots[j]+3,Boundary.knots=c(18,80)),data=Wage[ind!=l,]),newdata=Wage[ind==l,])
cv.wage[j,]=cv.wage[j,]+c(mean((Wage$wage[ind==l]-t.ns)^2),mean((Wage$wage[ind==l]-t.bs)^2))
}}
cv.wage=cv.wage/max(ind)
par(mfrow=c(1,2)); plot(n.knots,cv.wage[,1],'o',xlab='number of knots',ylab='10 folder cv error',main='natural splines');
plot(n.knots,cv.wage[,2],xlab='number of knots','o',ylab='10 folder cv error',main='B splines')
#number of knots minimizing 10-folder cv error
knots.n=n.knots[cv.wage[,1]==min(cv.wage[,1])]
knots.b=n.knots[cv.wage[,2]==min(cv.wage[,2])]
#firstly we sort the age
f=sort(Wage$age,index=TRUE); Wage=Wage[f$ix,]
#predict wages
pred.ns=predict(lm(wage~ns(age,df=knots.n+1,Boundary.knots=c(18,80)),data=Wage),newdata=Wage,interval = 'confidence')
pred.bs=predict(lm(wage~bs(age,df=knots.b+3,Boundary.knots=c(18,80)),data=Wage),newdata=Wage,interval = 'confidence')
pred.ss=smooth.spline(Wage$age,Wage$wage,cv=FALSE)
par(mfrow=c(1,3));
plot(Wage$age,Wage$wage,main="natural splines",ylim=c(min(Wage$wage)-2,max(Wage$wage)+2),col='grey');
matlines(Wage$age,pred.ns,col=2,lty=c(1,2,2))
plot(Wage$age,Wage$wage,main="B splines",ylim=c(min(Wage$wage)-2,max(Wage$wage)+2),col='grey');
matlines(Wage$age,pred.bs,col=2,lty=c(1,2,2))
plot(Wage$age,Wage$wage,main="Smoothing splines",ylim=c(min(Wage$wage)-2,max(Wage$wage)+2),col='grey');
matlines(Wage$age,fitted(pred.ss),col=2,lty=c(1,2,2))
Wage=data.frame(Wage,high=as.numeric(Wage$wage>=250))
v.age=c(18:80); #vector of ages
p.age=rep(0,length(v.age)); #proportion of wage>=250 given age
for(i in 1:length(v.age)){p.age[i]=mean(Wage$high[Wage$age==v.age[i]])}
t.ns.prob=predict(glm(high~ns(age,df=knots.n+1,Boundary.knots=c(18,80)),data=Wage,family=binomial(link = "logit")),type = "link", se.fit = TRUE)
t.bs.prob=predict(glm(high~bs(age,df=knots.b+3,Boundary.knots=c(18,80)),data=Wage,family=binomial(link = "logit")),type = "link", se.fit = TRUE)
t.prob=predict(glm(high~age,data=Wage,family=binomial(link = "logit")),type = "link", se.fit = TRUE)
library(splines)
car <- read.csv(file='car.csv',header=TRUE)
test <- car[which(is.na(car$Price)==TRUE),]
train <- car[-which(is.na(car$Price)==TRUE),]
lm.fit <- lm(Price~.,data=train)
mean(residuals(lm.fit)^2)
#vector of no of knots
v=c(1:20);
cv.nc=rep(0,length(v))
ii=rep(c(1:10),11); ii=ii[1:nrow(train)]
for(j in 1:length(v)){ for(i in 1:max(ii)){
#natural spline basis function for data not in i-th folder
nc.HP=ns(train$HP[ii!=i],df=1+v[j])
nc.Wheel=ns(train$Wheel.base[ii!=i],df=1+v[j])
nc.Disp=ns(train$Disp[ii!=i],df=1+v[j])
data = data.frame(nc.HP=nc.HP, nc.Wheel=nc.Wheel, nc.Disp=nc.Disp, Price=train$Price[ii!=i])
lm.nc <- lm(Price~., data)
#natural spline basis function for data in i-th folder
nc.HP=predict(nc.HP,train$HP[ii==i])
nc.Wheel=predict(nc.Wheel,train$Wheel.base[ii==i])
nc.Disp=predict(nc.Disp,train$Disp[ii==i])
pred.nc <- predict(lm.nc,data.frame(nc.HP=nc.HP,nc.Wheel=nc.Wheel,nc.Disp=nc.Disp))
cv.nc[j]=cv.nc[j]+mean((pred.nc-train$Price[ii==i])^2)
} }
cv.nc = cv.nc/10
#number of knots minimizing the cv error
opt.v <- v[which.min(cv.nc)]
#basis function
nc.HP=ns(train$HP,df=1+opt.v)
nc.Wheel=ns(train$Wheel.base,df=1+opt.v)
nc.Disp=ns(train$Disp,df=1+opt.v)
#Natural cubic spline fit using the optimal no of knots
lm.nc <- lm(train$Price~nc.HP+nc.Wheel+nc.Disp)
#MSE
mean(lm.nc$residuals^2)
#scatter plot for price against HP
plot(Price~HP,train); lines(sort(train$HP),fitted(lm.nc)[order(train$HP)],col='red')
#Let's evaluate the basis functions for test data using the same knots
nc.HP=predict(nc.HP,test$HP)
nc.Wheel=predict(nc.Wheel,test$Wheel)
nc.Disp=predict(nc.Disp,test$Disp)
#predicted prices for the test data
predict(lm.nc,data.frame(nc.HP=nc.HP,nc.Wheel=nc.Wheel,nc.Disp=nc.Disp))
#vector of no of knots
v=c(1:20);
cv.bs=rep(0,length(v))
ii=rep(c(1:10),11); ii=ii[1:nrow(train)]
for(j in 1:length(v)){ for(i in 1:max(ii)){
#B spline basis function for data not in i-th folder
bs.HP=bs(train$HP[ii!=i],df=3+v[j],Boundary.knots = range(train$HP))
bs.Wheel=bs(train$Wheel.base[ii!=i],df=3+v[j],Boundary.knots = range(train$Wheel.base))
bs.Disp=bs(train$Disp[ii!=i],df=3+v[j],Boundary.knots =range(train$Disp))
data = data.frame(bs.HP=bs.HP, bs.Wheel=bs.Wheel, bs.Disp=bs.Disp, Price=train$Price[ii!=i])
lm.bs <- lm(Price~., data)
#B spline basis function for data in i-th folder
bs.test.HP=predict(bs.HP,train$HP[ii==i])
bs.test.Wheel=predict(bs.Wheel,train$Wheel.base[ii==i])
bs.test.Disp=predict(bs.Disp,train$Disp[ii==i])
pred.bs <- predict(lm.bs,data.frame(bs.HP=bs.test.HP,bs.Wheel=bs.test.Wheel,bs.Disp=bs.test.Disp))
cv.bs[j]=cv.bs[j]+mean((pred.bs-train$Price[ii==i])^2)
} }
cv.bs=cv.bs/10
#number of knots minimizing the cv error
opt.v <- v[which.min(cv.bs)]
bs.HP=bs(train$HP,df=3+opt.v,Boundary.knots=range(car$HP))
bs.Wheel=bs(train$Wheel.base,df=3+opt.v,Boundary.knots=range(car$Wheel.base))
bs.Disp=bs(train$Disp,df=3+opt.v,Boundary.knots=range(car$Disp))
#B-spline fit using the optimal no of knots
lm.bs <- lm(train$Price~bs.HP+bs.Wheel+bs.Disp)
#MSE
mean(lm.bs$residuals^2)
#scatter plot for price against HP
plot(Price~HP,train); lines(sort(train$HP),fitted(lm.bs)[order(train$HP)],col='red')
#Let's evaluate the basis functions for test data using the same knots
bs.HP=predict(bs.HP,test$HP)
bs.Wheel=predict(bs.Wheel,test$Wheel)
bs.Disp=predict(bs.Disp,test$Disp)
predict(lm.bs,data.frame(bs.HP=bs.HP,bs.Wheel=bs.Wheel,bs.Disp=bs.Disp))
library(gbm); set.seed(1234)
car.gbm <- gbm(Price~., data = train, distribution='gaussian',shrinkage = 0.1, n.trees = 500, cv.folds = 10)
car.gbm.perf = gbm.perf(car.gbm, method = "cv")
#fitted value
car.gbm.fitted <- predict(car.gbm,newdata = train)
#MSE
mean((car.gbm.fitted-train$Price)^2)
Cigar <- read.csv(file='Cigar.csv',header=TRUE)
plot(sales~price,Cigar)
#vector of no of knots
v=c(1:20);
cv.nc=cv.b=rep(0,length(v))
ii=rep(c(1:10),138)
for(j in 1:length(v)){ for(i in 1:max(ii)){
#natural spline basis function for data not in i-th folder
nc.price <-ns(Cigar$price[ii!=i],df=1+v[j],Boundary.knots=range(Cigar$price))
#B spline basis function for data not in i-th folder
b.price <- bs(Cigar$price[ii!=i],df=3+v[j],Boundary.knots=range(Cigar$price))
nc.cigar<-lm(Cigar$sales[ii!=i]~nc.price)
b.cigar<-lm(Cigar$sales[ii!=i]~b.price)
#alternative way to make predictions
nc.pred <- as.matrix(predict(nc.price,Cigar$price[ii==i]))%*%coef(nc.cigar)[-1]+coef(nc.cigar)[1]
b.pred <- as.matrix(predict(b.price,Cigar$price[ii==i]))%*%coef(b.cigar)[-1]+coef(b.cigar)[1]
cv.nc[j]=cv.nc[j]+mean((nc.pred-Cigar$sales[ii==i])^2)
cv.b[j]=cv.b[j]+mean((b.pred-Cigar$sales[ii==i])^2)
} }
#number of knots minimizing cv errors.
opt.v.nc <- v[which.min(cv.nc)]
opt.v.b <- v[which.min(cv.b)]
nc.cigar<-lm(Cigar$sales~ns(Cigar$price,df=1+opt.v.nc))
b.cigar<-lm(Cigar$sales~bs(Cigar$price,df=3+opt.v.b))
#MSE
mean((nc.cigar$fitted.values-Cigar$sales)^2)
mean((b.cigar$fitted.values-Cigar$sales)^2)
sp.cigar <- smooth.spline(Cigar$price,Cigar$sales,all.knots=TRUE)
sp.pred <- predict(sp.cigar,Cigar$price)$y
#MSE
mean((sp.pred-Cigar$sales)^2)
range(Ack$Time)
head(Ack)
head(rent)
range(rent$Year)
#LOOCV error -vs- number of knots
MRent.mse.ns=MRent.mse.bs=n.knots=c(0:20)
MRent.cv.ns=MRent.cv.bs=rep(0,length(n.knots))
range(rent$Year)
for(j in 1:length(n.knots)){ for(l in 1:length(rent$Year)){
#predict temperatures
t.ns=predict(lm(MRent~ns(Year,df=n.knots[j]+1,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
t.bs=predict(lm(MRent~bs(Year,df=n.knots[j]+3,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
#cumulative sum of error
MRent.cv.ns[j]= MRent.cv.ns[j]+(rent$MRent[l]-t.ns)^2
MRent.cv.bs[j]= MRent.cv.bs[j]+(rent$MRent[l]-t.bs)^2
}}
plot(Ack$Time,Ack$Temperature,ylim=c(11,18),main='Natural splines'); matlines(Ack$Time,t.ns,lty=c(1,3,3),col=c(1,1,1));
temp.mse.ns=temp.mse.bs=n.knots=c(0:19)
for(j in 1:length(temp.mse.ns)){
#natural splines
t.ns=ns(Ack$Time,df=n.knots[j]+1)
#B splines
t.bs=bs(Ack$Time,df=n.knots[j]+3)
#predict temperatures
pre.t.ns=predict(lm(Temperature~t.ns,data=Ack), interval = 'confidence');
pre.t.bs=predict(lm(Temperature~t.bs,data=Ack), interval = 'confidence');
#MSE
temp.mse.ns[j]=mean((Ack$Temperature-pre.t.ns[,1])^2)
temp.mse.bs[j]=mean((Ack$Temperature-pre.t.bs[,1])^2)
}
plot(n.knots,temp.mse.ns,'l',ylab='MSE',xlab='Number of knots'); lines(n.knots,temp.mse.bs,col='red');
legend(12,0.85,legend=c("Natural splines","B splines, order 4 "),col=c(1,2),lty=1);
range(Ack$Time)
#LOOCV error -vs- number of knots
temp.cv.ns=temp.cv.bs=rep(0,length(n.knots))
for(j in 1:length(n.knots)){ for(l in 1:length(Ack$Time)){
#predict temperatures
t.ns=predict(lm(Temperature~ns(Time,df=n.knots[j]+1,intercept=FALSE,Boundary.knots=c(1,24)),data=Ack[-l,]),newdata=Ack[l,])
t.bs=predict(lm(Temperature~bs(Time,df=n.knots[j]+3,intercept=FALSE,Boundary.knots=c(1,24)),data=Ack[-l,]),newdata=Ack[l,])
#cumulative sum of error
temp.cv.ns[j]=temp.cv.ns[j]+(Ack$Temperature[l]-t.ns)^2
temp.cv.bs[j]=temp.cv.bs[j]+(Ack$Temperature[l]-t.bs)^2
}}
temp.cv.ns=temp.cv.ns/length(Ack$Time)
temp.cv.bs=temp.cv.bs/length(Ack$Time)
plot(n.knots,log(temp.cv.ns),ylab='log(cv error)',xlab='Number of knots','o',ylim=c(-3,3)); lines(n.knots,log(temp.cv.bs),col='red','o');
legend(12,2,legend=c("Natural splines","B splines, order 4"),col=c(1,2), lty=1);
t.ns=predict(lm(Temperature~ns(Time,df=5+1),data=Ack),newdata=Ack,interval = 'confidence')
t.bs=predict(lm(Temperature~bs(Time,df=5+3),data=Ack),newdata=Ack,interval = 'confidence')
par(mfrow=c(1,2));
plot(Ack$Time,Ack$Temperature,ylim=c(11,18),main='Natural splines'); matlines(Ack$Time,t.ns,lty=c(1,3,3),col=c(1,1,1));
plot(Ack$Time,Ack$Temperature,ylim=c(11,18),main='B splines'); matlines(Ack$Time,t.bs,lty=c(1,3,3),col=c(1,1,1));
plot(n.knots,log(temp.cv.ns),ylab='log(cv error)',xlab='Number of knots','o',ylim=c(-3,3)); lines(n.knots,log(temp.cv.bs),col='red','o');
legend(12,2,legend=c("Natural splines","B splines, order 4"),col=c(1,2), lty=1);
MRent.mse.ns=MRent.mse.bs=n.knots=c(0:19)
for(j in 1:length(MRent.mse.ns)){
#natural splines
#t.ns=ns(rent$Year,df=n.knots[j]+1)
#B splines
t.bs=bs(rent$Year,df=n.knots[j]+3)
#predict temperatures
#pre.MRent.ns=predict(lm(MRent~t.ns,data=rent), interval = 'confidence');
pre.MRent.bs=predict(lm(MRent~t.bs,data=rent), interval = 'confidence');
#MSE
# MRent.mse.ns[j]=mean((rent$MRent- pre.MRent.ns[,1])^2)
#MRent.mse.bs[j]=mean((Ack$Temperature- pre.MRent.bs[,1])^2)
}
#
#
# plot(n.knots,temp.mse.ns,'l',ylab='MSE',xlab='Number of knots'); lines(n.knots,temp.mse.bs,col='red');
# legend(12,0.85,legend=c("Natural splines","B splines, order 4 "),col=c(1,2),lty=1);
#LOOCV error -vs- number of knots
MRent.mse.ns=MRent.mse.bs=n.knots=c(0:20)
MRent.cv.ns=MRent.cv.bs=rep(0,length(n.knots))
range(rent$Year)
for(j in 1:length(n.knots)){ for(l in 1:length(rent$Year)){
#predict temperatures
t.ns=predict(lm(MRent~ns(Year,df=n.knots[j]+1,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
t.bs=predict(lm(MRent~bs(Year,df=n.knots[j]+3,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
#cumulative sum of error
MRent.cv.ns[j]= MRent.cv.ns[j]+(rent$MRent[l]-t.ns)^2
MRent.cv.bs[j]= MRent.cv.bs[j]+(rent$MRent[l]-t.bs)^2
}}
#predict temperatures
t.ns=predict(lm(MRent~ns(Year,df=n.knots[j]+1,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
t.bs=predict(lm(MRent~bs(Year,df=n.knots[j]+3,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
#cumulative sum of error
MRent.cv.ns[j]= MRent.cv.ns[j]+(rent$MRent[l]-t.ns)^2
MRent.cv.bs[j]= MRent.cv.bs[j]+(rent$MRent[l]-t.bs)^2
n.knots
MRent.mse.ns=MRent.mse.bs=n.knots=c(0:19)
MRent.cv.ns=MRent.cv.bs=rep(0,length(n.knots))
range(rent$Year)
for(j in 1:length(n.knots)){ for(l in 1:length(rent$Year)){
#predict temperatures
t.ns=predict(lm(MRent~ns(Year,df=n.knots[j]+1,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
t.bs=predict(lm(MRent~bs(Year,df=n.knots[j]+3,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
#cumulative sum of error
MRent.cv.ns[j]= MRent.cv.ns[j]+(rent$MRent[l]-t.ns)^2
MRent.cv.bs[j]= MRent.cv.bs[j]+(rent$MRent[l]-t.bs)^2
}}
for(j in 1:length(n.knots)){ for(l in 1:length(rent$Year)){
#predict temperatures
t.ns=predict(lm(MRent~ns(Year,df=n.knots[j]+1,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
t.bs=predict(lm(MRent~bs(Year,df=n.knots[j]+3,intercept=FALSE,Boundary.knots=c(1993,2021)),data=rent[-l,]),newdata=rent[l,])
#cumulative sum of error
MRent.cv.ns[j]= MRent.cv.ns[j]+(rent$MRent[l]-t.ns)^2
MRent.cv.bs[j]= MRent.cv.bs[j]+(rent$MRent[l]-t.bs)^2
}}
#possible numbers of knots
n.knots=c(0:20)
cv.rent=matrix(0,length(n.knots),2)
#index for 10 cv folders
ind=rep(c(1:10),200); #indicates folder ownership of each data point
range(rent$Year)
for(j in 1:length(n.knots)){ for(l in 1:max(ind)){
t.ns=predict(lm(MRent~ns(Year,df=n.knots[j]+1,Boundary.knots=c(1993,2021)),data=rent[ind!=l,]),newdata=rent[ind==l,])###???
t.bs=predict(lm(MRent~bs(Year,df=n.knots[j]+3,Boundary.knots=c(1993,2021)),data=rent[ind!=l,]),newdata=rent[ind==l,])
cv.rent[j,]=cv.rent[j,]+c(mean((rent$MRent[ind==l]-t.ns)^2),mean((rent$MRent[ind==l]-t.bs)^2))
}}
cv.rent=cv.rent/max(ind)
par(mfrow=c(1,2)); plot(n.knots,cv.rent[,1],'o',xlab='number of knots',ylab='10 folder cv error',main='natural splines');
plot(n.knots,cv.rent[,2],xlab='number of knots','o',ylab='10 folder cv error',main='B splines')
#number of knots minimizing 10-folder cv error
knots.n=n.knots[cv.rent[,1]==min(cv.rent[,1])]
knots.b=n.knots[cv.rent[,2]==min(cv.rent[,2])]
knots.n
t.bs.prob=predict(rq(Mrent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,family=binomial(link = "logit")),type = "link", se.fit = TRUE)
t.bs.prob=predict(rq(MRrent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,family=binomial(link = "logit")),type = "link", se.fit = TRUE)
t.bs.prob=predict(rq(MRrent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,tau = 0.5),type = "link", se.fit = TRUE)
t.bs.prob=predict(rq(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,tau = 0.5),type = "link", se.fit = TRUE)
summary(t.bs.prob)
t.bs.prob=rq(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,tau = 0.5)
summary(t.bs.prob)
t.bs.prob=rq(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,tau = 0.1)
summary(t.bs.prob)
plot(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)))
plot(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)), data = rent)
plot(MRent~bs(Year~., data = rent)
plot(MRent~bs(Year~., data = rent))
plot(MRent~Year~., data = rent))
plot(MRent~Year, data = rent))
plot(MRent~Year, data = rent)
plot(MRent~Year, data = rent);lines(c(1995:2020), predict(t.bs,newdata=rent.tau=0.1))
plot(MRent~Year, data = rent);lines(c(1995,2020), predict(t.bs,newdata=rent.tau=0.1))
plot(t,bs)
plot(t.bs)
plot(t.bs, col="red")
plot(t.bs, col="pink")
t.bs2.prob=rq(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,tau = 0.1)
summary(t.bs2.prob)
plot(t.bs2.prob)
plot(t.bs, col="pink")
par(new=TRUE)
plot(t.bs2.prob)
plot(t.bs2.prob)
t.bs2.prob=rq(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,tau = 0.1)
plot(t.bs, col="pink")
plot(t.bs2.prob)
rq.01=rq(MRent~bs(Year,df=knots.b+3,Boundary.knots=c(1993,2021)),data=rent,tau = 0.1)
plot(rq.01)
summary(t.bs2.prob)
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile((MREent,prob=c(0,1,0.5,0.9)),Boundary.knots=c(1993,
require(quantreg)
rq.05 = rq(Year ~ bs(MRent, knots = quantile((MREent,prob=c(0,1,0.5,0.9)),Boundary.knots=c(1993,
rq.05 = rq(Year ~ bs(MRent, knots = quantile(MREent,prob=c(0,1,0.5,0.9)),Boundary.knots=c(1993, 2021)),data=rent)
rq.05 = rq(Year ~ bs(MRent, knots = quantile(MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=c(1993, 2021)),data=rent)
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=c(1993, 2021)))
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(x, f=0.05))
summary(rq.05)
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(x, f=0.05)))
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(x, f=0.05))
rq.05 = rq(rent$MRent ~ bs(rent$Year, knots = quantile(rent$Year,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(x, f=0.05))
rq.05 = rq(rent$MRent ~ bs(rent$Year, knots = quantile(rent$Year,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(x, f=0.05)))
t.bs.prob=predict(rq(high~bs(age,df=knots.b+3,Boundary.knots=c(18,80)),data=Wage,family=binomial(link = "logit")),type = "link", se.fit = TRUE)
rq.05 = rq(rent$MRent ~ bs(rent$Year, knots = quantile(rent$Year,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(rent$Year, f=0.05)))
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(rent$MRent, f=0.05)))
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(rent$MRent)))
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1)),Boundary.knots=extendrange(rent$MRent)))
rq.05 = rq(rent$Year ~ bs(rent$MRent, knots = quantile(rent$MRent,prob=c(0,1,0.5,0.9)),Boundary.knots=extendrange(rent$MRent,f=0.05)))
setwd("~/Documents/repos/Stats765_Project/Project_Deceptive")
knitr::opts_chunk$set(echo = TRUE)
raw_data = read.csv("deceptive-opinion.csv")
raw_data
as.factor(raw_data$deceptive)
raw_data
is.na(raw_data)
summary(is.na(raw_data))
sum(is.na(raw_data))
summary(raw_data$source)
raw_data$source
as.factor(raw_data$source)
raw_data = read.csv("deceptive-opinion.csv")
raw_data
View(raw_data)
names(raw_data)
